diff --git a/hot_pot/consumers.py b/hot_pot/consumers.py
index 7b88c84..b9f1c45 100644
--- a/hot_pot/consumers.py
+++ b/hot_pot/consumers.py
@@ -4,6 +4,7 @@ from asgiref.sync import async_to_sync
 from channels.generic.websocket import WebsocketConsumer
 
 from hot_pot.models import Room, Song, Playlist
+from hot_pot.views.room_views import add_user_to_room, remove_user_from_room, get_users_in_room
 
 
 class PlayerConsumer(WebsocketConsumer):
@@ -18,10 +19,12 @@ class PlayerConsumer(WebsocketConsumer):
         self.room_name = self.scope['url_route']['kwargs']['room_name']
         self.room_group_name = 'room_%s' % self.room_name
         self.user = self.scope['user']
-        print(self.room_name)
         self.is_host = Room.objects.get(name=self.room_name).owner == self.user
 
-        print('connected user: {}, is_host = {}'.format(self.user, self.is_host))
+        print('[consumers.py] Connected user: {}, is_host = {}'.format(self.user, self.is_host))
+
+        # Call views function to add user to the room
+        add_user_to_room(self.user.username, self.room_name)
 
         # Join room group
         async_to_sync(self.channel_layer.group_add)(
@@ -29,7 +32,7 @@ class PlayerConsumer(WebsocketConsumer):
             self.channel_name,
         )
 
-        # Join channel group for this single user
+        # Join channel group for this single user (TODO: Probably delete later)
         async_to_sync(self.channel_layer.group_add)(
             self.room_group_name + '-' + str(self.user.username),
             self.channel_name,
@@ -38,6 +41,11 @@ class PlayerConsumer(WebsocketConsumer):
         self.accept()
 
     def disconnect(self, close_code):
+        print("[consumers.py] User %s disconnected from the room" % self.user.username)
+
+        # Call views function to remove user from the room
+        remove_user_from_room(self.user.username, self.room_name)
+
         # Leave room group
         async_to_sync(self.channel_layer.group_discard)(
             self.room_group_name,
@@ -48,7 +56,6 @@ class PlayerConsumer(WebsocketConsumer):
     def receive(self, text_data):
         text_data_json = json.loads(text_data)
 
-        print('consumers.receive: ' + str(text_data_json))
         if 'chat_message' in text_data_json:
             chat_text = text_data_json['chat_message']
             username = text_data_json['username']
@@ -105,8 +112,6 @@ class PlayerConsumer(WebsocketConsumer):
 
         elif 'add_to_song_queue_message' in text_data_json or 'add_to_song_pool_message' in text_data_json:
             playlist = 'queue' if 'add_to_song_queue_message' in text_data_json else 'pool'
-            print('add_to_song_[queue|pool]_message received on backend')
-
             # Create new song
             # FIXME: Creating replicate songs... Exact same song_id and song_name... But in DB have diff pk's... OK?
             new_song = Song.objects.create(song_id=text_data_json['song_id'], song_name=text_data_json['song_name'])
@@ -120,15 +125,13 @@ class PlayerConsumer(WebsocketConsumer):
 
             # IMPORTANT: Only add the song if it doesn't already exist - otherwise multiple values for same key
             if playlist is 'queue' and not song_queue.songs.filter(song_id=new_song.song_id).exists():
-                print('Created and added new song: ' + str(new_song) + ' to queue')
                 song_queue.songs.add(new_song)
             elif playlist is 'pool' and not song_pool.songs.filter(song_id=new_song.song_id).exists():
-                print('Created and added new song: ' + str(new_song) + ' to pool')
                 song_pool.songs.add(new_song)
 
     # Receive chat message from room group
     def chat_message(self, event):
-        print('chat_message handler called, event = ' + str(event))
+        print('[consumers.py] chat_message handler called, event = ' + str(event))
         chat_text = event['chat_text']
         username = event['username']
 
@@ -140,7 +143,7 @@ class PlayerConsumer(WebsocketConsumer):
 
     # Receive playback message from room group
     def playback_message(self, event):
-        print('playback_message handler called, event = ' + str(event))
+        print('[consumers.py] playback_message handler called, event = ' + str(event))
         playback_info = event['playback_info']
         username = event['username']
 
@@ -152,10 +155,10 @@ class PlayerConsumer(WebsocketConsumer):
 
     # Receive sync request message
     def sync_request_message(self, event):
+        print('[consumers.py] sync_request_message handler called, event = ' + str(event))
+
         # FIXME: Currently only the *owner* is handling sync requests
         if self.is_host:
-            print('[{}] sync_request_message handler called, event = {}'.format(self.user, str(event)))
-
             username = event['from_username']
 
             # Send message to WebSocket
@@ -166,14 +169,14 @@ class PlayerConsumer(WebsocketConsumer):
 
     # Receive sync request message
     def sync_result_message(self, event):
+        print('[consumers.py] sync_result_message handler called, event = ' + str(event))
+
         # FIXME: Currently only the *owner* is handling sync requests
         # Note: Host just sent out sync_result, so no point in handling this as the host
         if not self.is_host:
-            print('[{}] sync_result handler called, event = {}'.format(self.user, str(event)))
-
             self.send(text_data=json.dumps({
                 'sync_result': '',
                 'video_id': event['video_id'],
                 'position': event['position'],
                 'is_playing': event['is_playing'],
-            }))
+            }))
\ No newline at end of file
diff --git a/hot_pot/models.py b/hot_pot/models.py
index 93dfb82..1468c72 100644
--- a/hot_pot/models.py
+++ b/hot_pot/models.py
@@ -38,7 +38,7 @@ def save_user_profile(sender, instance, **kwargs):
 class Room(models.Model):
     id = models.AutoField(primary_key=True)
     name = models.CharField(max_length=42)
-    owner = models.ForeignKey(User, on_delete=models.CASCADE, blank=True)
+    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name='owner', blank=True)
     create_date = models.DateTimeField(auto_now=True)
     cover_pic = models.ImageField(upload_to='room-photo', blank=True,
                                   default='room-photo/logo.png',
@@ -49,6 +49,8 @@ class Room(models.Model):
 
     thumbs_up = models.IntegerField(default=0)
 
+    users = models.ManyToManyField(User, related_name='current_users') # Keep track of current users in the room
+
     # location = models.CharField(max_length=100)  # Some Google Maps API ID (e.g. coordinates)
     # place = models.CharField(max_length=100)  # Some Google Places API ID (e.g. for a business)
     # listeners = models.ManyToManyField(User)
diff --git a/hot_pot/static/js/room/search.js b/hot_pot/static/js/room/search.js
index acc1139..424b080 100644
--- a/hot_pot/static/js/room/search.js
+++ b/hot_pot/static/js/room/search.js
@@ -1,46 +1,6 @@
 /* NOAM JS START **********************************************************************************************/
 
 
-// The boilerplate code below is copied from the Django 1.10 documentation.
-// It establishes the necessary HTTP header fields and cookies to use
-// Django CSRF protection with jQuery Ajax requests.
-
-$(document).ready(function () {  // Runs when the document is ready
-    // using jQuery
-    // https://docs.djangoproject.com/en/1.10/ref/csrf/
-    function getCookie(name) {
-        var cookieValue = null;
-        if (document.cookie && document.cookie !== '') {
-            var cookies = document.cookie.split(';');
-            for (var i = 0; i < cookies.length; i++) {
-                var cookie = jQuery.trim(cookies[i]);
-                // Does this cookie string begin with the name we want?
-                if (cookie.substring(0, name.length + 1) === (name + '=')) {
-                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
-                    break;
-                }
-            }
-        }
-        return cookieValue;
-    }
-
-    var csrftoken = getCookie('csrftoken');
-
-    function csrfSafeMethod(method) {
-        // these HTTP methods do not require CSRF protection
-        return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
-    }
-
-    $.ajaxSetup({
-        beforeSend: function (xhr, settings) {
-            if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
-                xhr.setRequestHeader("X-CSRFToken", csrftoken);
-            }
-        }
-    });
-
-}); // End of $(document).ready
-
 $("#panel").on("click", "#search-button", function (event) {
     var panel = $(this).closest("#panel");
     var query = panel.find("#search-query");
diff --git a/hot_pot/templates/hot_pot/room/room.html b/hot_pot/templates/hot_pot/room/room.html
index 2a4ad46..c5b1aee 100644
--- a/hot_pot/templates/hot_pot/room/room.html
+++ b/hot_pot/templates/hot_pot/room/room.html
@@ -186,21 +186,66 @@
     <script src="{% static "js/room/sockets.js" %}"></script>
     <script src="{% static "js/room/chat.js" %}"></script>
     <script src="{% static "js/room/youtube_player.js" %}"></script>
+    <script src="{% static "js/room/current_users.js" %}"></script>
 
     <!-- Leftover in-line JS script block for UI related things -->
     <script>
+
+        // The boilerplate code below is copied from the Django 1.10 documentation.
+        // It establishes the necessary HTTP header fields and cookies to use
+        // Django CSRF protection with jQuery Ajax requests.
+
+        $(document).ready(function () {  // Runs when the document is ready
+            // using jQuery
+            // https://docs.djangoproject.com/en/1.10/ref/csrf/
+            function getCookie(name) {
+                var cookieValue = null;
+                if (document.cookie && document.cookie !== '') {
+                    var cookies = document.cookie.split(';');
+                    for (var i = 0; i < cookies.length; i++) {
+                        var cookie = jQuery.trim(cookies[i]);
+                        // Does this cookie string begin with the name we want?
+                        if (cookie.substring(0, name.length + 1) === (name + '=')) {
+                            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
+                            break;
+                        }
+                    }
+                }
+                return cookieValue;
+            }
+
+            var csrftoken = getCookie('csrftoken');
+
+            function csrfSafeMethod(method) {
+                // these HTTP methods do not require CSRF protection
+                return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
+            }
+
+            $.ajaxSetup({
+                beforeSend: function (xhr, settings) {
+                    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
+                        xhr.setRequestHeader("X-CSRFToken", csrftoken);
+                    }
+                }
+            });
+
+            // Call this immediately (don't wait 5 seconds to get current list of users)
+            updateCurrentUsersList();
+
+        }); // End of $(document).ready
+
         /*
-            $(document).ready(function () {
-                $("#addFriendForm").submit(function () {
-                    var names = $('#friendList input:checked').map(function () {
-                        return this.name;
-                    }).get();
-
-                    alert(names);
-                    return false;
-                });
+        $(document).ready(function () {
+            $("#addFriendForm").submit(function () {
+                var names = $('#friendList input:checked').map(function () {
+                    return this.name;
+                }).get();
+
+                alert(names);
+                return false;
             });
-            */
+        });
+        */
 
         function openForm() {
 
diff --git a/hot_pot/urls.py b/hot_pot/urls.py
index a80ae80..7522dae 100644
--- a/hot_pot/urls.py
+++ b/hot_pot/urls.py
@@ -5,36 +5,39 @@ from django.views.generic.base import RedirectView
 
 from hot_pot.views import auth_views, room_views, map_views, home_views
 
-urlpatterns = [
+urlpatterns = \
+    [
 
-    # Auth (login, registration, logout)
-    path('', RedirectView.as_view(url='login'), name="go_to_login"),
-    path('login', auth_views.custom_login, name='login'),
-    path('register', auth_views.register, name='register'),
-    re_path(r'^confirm-email/username=(?P<username>[0-9A-Za-z_]+)/(?P<token>[0-9A-Za-z]{1,13}-[0-9A-Za-z]{1,20})/$',
-            auth_views.confirm_email, name='confirm'),
-    path('logout', auth_views.custom_logout, name='logout'),
+        # Auth (login, registration, logout)
+        path('', RedirectView.as_view(url='login'), name="go_to_login"),
+        path('login', auth_views.custom_login, name='login'),
+        path('register', auth_views.register, name='register'),
+        re_path(r'^confirm-email/username=(?P<username>[0-9A-Za-z_]+)/(?P<token>[0-9A-Za-z]{1,13}-[0-9A-Za-z]{1,20})/$',
+                auth_views.confirm_email, name='confirm'),
+        path('logout', auth_views.custom_logout, name='logout'),
 
-    # Home
-    re_path(r'^username/(?P<username>[a-zA-Z0-9_]{3,15})/$', home_views.home, name='home'),
-    path('myRooms', home_views.room_history, name="history"),
+        # Home
+        re_path(r'^username/(?P<username>[a-zA-Z0-9_]{3,15})/$', home_views.home, name='home'),
+        path('myRooms', home_views.room_history, name="history"),
 
-    # Room
-    re_path(r'^room/(?P<room_id>[^/]+)/$', room_views.room, name='room'),
-    re_path(r'^profile-photo/room/(?P<pk>\w+)/$', room_views.get_img, name='img'),
-    path('search-song', room_views.search_song, name='search-song'),
-    path('add-song-to-room-playlist-ajax', room_views.add_song_to_room_playlist_ajax),
-    path('add-song-from-pool-to-queue', room_views.add_song_from_pool_to_queue),
-    path('get-pool-songs-from-room', room_views.get_pool_songs_from_room),
-    path('get-queue-songs-from-room', room_views.get_queue_songs_from_room),
-    re_path(r'^get-top-of-song-queue/(?P<room_id>[^/]+)/$', room_views.get_top_of_song_queue,
-            name='get-top-of-song-queue'),
-    re_path(r'^delete-from-song-queue/(?P<room_id>[^/]+)/(?P<song_id>[^/]+)$',
-            room_views.delete_from_song_queue, name='delete-from-song-queue'),
+        # Room
+        re_path(r'^room/(?P<room_id>[^/]+)/$', room_views.room, name='room'),
+        re_path(r'^profile-photo/room/(?P<pk>\w+)/$', room_views.get_img, name='img'),
+        path('search-song', room_views.search_song, name='search-song'),
+        path('add-song-to-room-playlist-ajax', room_views.add_song_to_room_playlist_ajax),
+        path('add-song-from-pool-to-queue', room_views.add_song_from_pool_to_queue),
+        path('get-pool-songs-from-room', room_views.get_pool_songs_from_room),
+        path('get-queue-songs-from-room', room_views.get_queue_songs_from_room),
+        re_path(r'^get-top-of-song-queue/(?P<room_id>[^/]+)/$', room_views.get_top_of_song_queue,
+                name='get-top-of-song-queue'),
+        re_path(r'^delete-from-song-queue/(?P<room_id>[^/]+)/(?P<song_id>[^/]+)$',
+                room_views.delete_from_song_queue, name='delete-from-song-queue'),
+        re_path(r'^get-users-from-room/(?P<room_name>[^/]+)/$', room_views.get_users_in_room,
+                name='get-users-from-room'),
 
-    # Maps
-    path('map-of-rooms', map_views.map_of_rooms, name='map_of_rooms'),
-    path('add-marker', map_views.add_marker),
-    path('get-markers', map_views.get_markers),
+        # Maps
+        path('map-of-rooms', map_views.map_of_rooms, name='map_of_rooms'),
+        path('add-marker', map_views.add_marker),
+        path('get-markers', map_views.get_markers),
 
-] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
+    ] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
diff --git a/hot_pot/views/room_views.py b/hot_pot/views/room_views.py
index 0951053..7c2571a 100644
--- a/hot_pot/views/room_views.py
+++ b/hot_pot/views/room_views.py
@@ -1,6 +1,7 @@
 from mimetypes import guess_type
 
 from django.contrib.auth.decorators import login_required
+from django.contrib.auth.models import User
 from django.db import transaction
 from django.http import HttpResponse, Http404
 from django.shortcuts import render, get_object_or_404
@@ -206,3 +207,25 @@ def delete_from_song_queue(request, room_id, song_id):
     # TODO: Optional error logging if song doesn't exist anymore (possible if concurrent deletes)
 
     return HttpResponse('')
+
+
+# Add user to room's current_users when they join (called by consumers.py - don't need a request parameter)
+def add_user_to_room(username, room_name):
+    room = Room.objects.get(name=room_name)
+    user = User.objects.get(username=username)
+
+    room.users.add(user)
+
+# Remove user from room's current_users when they leave (called by consumers.py - don't need a request parameter)
+def remove_user_from_room(username, room_name):
+    room = Room.objects.get(name=room_name)
+    user = User.objects.get(username=username)
+
+    room.users.remove(user)
+
+# Get all the users in the room
+def get_users_in_room(request, room_name):
+    room = Room.objects.get(name=room_name)
+    context = {'users' : room.users.all()}
+
+    return render(request, 'hot_pot/room/users.json', context, content_type='application/json')
